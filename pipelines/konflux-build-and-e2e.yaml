apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: konflux-build-bundle-and-e2e
spec:
  params:
  - description: Source Repository URL
    name: git-url
    type: string
    default: "https://github.com/hasanawad94/operator.git"
  - default: "automate-csv-update"
    description: Revision of the Source Repository
    name: revision
    type: string
  - description: Fully Qualified Output Image
    name: output-image
    type: string
    default: quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-operator-bundle-e2e-test-image:latest
  - default: .
    description: Path to the source code of an application's component from where to build image.
    name: path-context
    type: string
  - default: bundle.Dockerfile
    description: Path to the Dockerfile inside the context specified by parameter path-context
    name: dockerfile
    type: string
  - default: "true"
    description: Force rebuild image
    name: rebuild
    type: string
  - default: "true"
    description: Skip checks against built image
    name: skip-checks
    type: string
  - default: "false"
    description: Execute the build with network isolation
    name: hermetic
    type: string
  - default: ""
    description: Build dependencies to be prefetched by Cachi2
    name: prefetch-input
    type: string
  - default: "1d"
    description: Image tag expiration time, time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    name: image-expires-after
  - default: "false"
    description: Build a source image.
    name: build-source-image
    type: string
  - default: "false"
    description: Add built image into an OCI image index
    name: build-image-index
    type: string
  - default: []
    description: Array of --build-arg values ("arg=value" strings) for buildah
    name: build-args
    type: array
  - default: ""
    description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
    name: build-args-file
    type: string
  - description: Snapshot of the application
    name: SNAPSHOT
    default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
    type: string
  results:
  - description: ""
    name: IMAGE_URL
    value: $(tasks.build-images.results.IMAGE_URL)
  - description: ""
    name: IMAGE_DIGEST
    value: $(tasks.build-images.results.IMAGE_DIGEST)
  - description: ""
    name: CHAINS-GIT_URL
    value: $(tasks.clone-repository.results.url)
  - description: ""
    name: CHAINS-GIT_COMMIT
    value: $(tasks.clone-repository.results.commit)
  tasks:
  - name: init
    params:
    - name: image-url
      value: $(params.output-image)
    - name: rebuild
      value: $(params.rebuild)
    - name: skip-checks
      value: $(params.skip-checks)
    taskRef:
      params:
      - name: name
        value: init
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:66e90d31e1386bf516fb548cd3e3f0082b5d0234b8b90dbf9e0d4684b70dbe1a
      - name: kind
        value: task
      resolver: bundles
  - name: clone-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    - name: ociStorage
      value: $(params.output-image).git
    - name: ociArtifactExpiresAfter
      value: $(params.image-expires-after)
    runAfter:
    - init
    taskRef:
      params:
      - name: name
        value: git-clone-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:d35e5d501cb5f5f88369511f76249857cb5ac30250e1dcf086939321964ff6b9
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: basic-auth
      workspace: git-auth
  - name: prefetch-dependencies
    params:
    - name: input
      value: $(params.prefetch-input)
    - name: SOURCE_ARTIFACT
      value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
    - name: ociStorage
      value: $(params.output-image).prefetch
    - name: ociArtifactExpiresAfter
      value: $(params.image-expires-after)
    runAfter:
    - clone-repository
    taskRef:
      params:
      - name: name
        value: prefetch-dependencies-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.2@sha256:5e15408f997557153b13d492aeccb51c01923bfbe4fbdf6f1e8695ce1b82f826
      - name: kind
        value: task
      resolver: bundles
    workspaces:
    - name: git-basic-auth
      workspace: git-auth
    - name: netrc
      workspace: netrc
  - name: generate-labels
    params:
    - name: label-templates
      value:
      - "release=$SOURCE_DATE_EPOCH"
    - name: source-date-epoch
      value: '$(tasks.clone-repository.results.commit-timestamp)'
    runAfter:
    - clone-repository
    taskRef:
      params:
      - name: name
        value: generate-labels
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-generate-labels:0.1@sha256:e1f4746dc33206a17867ead8f5c82a569cd925d352a19d108f205f54efc5589d
      - name: kind
        value: task
      resolver: bundles
  - name: patch-csv
    runAfter:
      - clone-repository
    taskRef:
      resolver: git
      params:
        - name: url
          value: https://github.com/konflux-ci/build-definitions.git
        - name: revision
          value: main
        - name: pathInRepo
          value: task/run-script-oci-ta/0.1/run-script-oci-ta.yaml
    params:
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: ociStorage
        value: $(params.output-image).git
      - name: SCRIPT_RUNNER_IMAGE
        value: quay.io/avinkuma/rh-openshift-builds/script-runner:latest
      - name: SCRIPT
        value: |
          #!/usr/bin/env bash
          set -ex
          # The path where the pipeline mounts the secret
          SECRET_AUTH_FILE="/tekton/creds-secrets/registry-redhat-io/.dockerconfigjson"

          # The default location that container tools automatically check
          DEFAULT_DOCKER_CONFIG_DIR="$HOME/.docker"
          DEFAULT_DOCKER_CONFIG_FILE="$DEFAULT_DOCKER_CONFIG_DIR/config.json"


          # --- 1. Debugging: Verify the mounted secret file ---
          echo "--- Verifying credential file at ${SECRET_AUTH_FILE} ---"

          # Check if the file exists and has content
          if [ ! -s "${SECRET_AUTH_FILE}" ]; then
            echo "Error: Credential file is missing or empty!"
            exit 1
          fi

          echo "Credential file found. Displaying content:"
          cat "${SECRET_AUTH_FILE}"
          echo "------------------------------------"


          # --- 2. The Fix: Copy the file to the default location ---
          echo "--- Copying credentials to default location ${DEFAULT_DOCKER_CONFIG_FILE} ---"

          # Create the directory if it doesn't exist
          mkdir -p "${DEFAULT_DOCKER_CONFIG_DIR}"

          # Copy the file
          cp "${SECRET_AUTH_FILE}" "${DEFAULT_DOCKER_CONFIG_FILE}"
          SNAPSHOT='$(params.SNAPSHOT)' ./hack/update-manifests-from-snapshot.sh
          
          make bundle IMG="$(echo '$(params.SNAPSHOT)' | jq -r '.components[] | select(.name == "openshift-builds-operator") | .containerImage')" REGISTRY_AUTH_FILE=/tekton/creds-secrets/registry-redhat-io/.dockerconfigjson
  - name: build-images
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    - name: HERMETIC
      value: $(params.hermetic)
    - name: PREFETCH_INPUT
      value: $(params.prefetch-input)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: BUILD_ARGS
      value:
      - $(params.build-args[*])
    - name: BUILD_ARGS_FILE
      value: $(params.build-args-file)
    - name: SOURCE_ARTIFACT
      value: $(tasks.patch-csv.results.SCRIPT_ARTIFACT)
    - name: CACHI2_ARTIFACT
      value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
    - name: LABELS
      value:
      - $(tasks.generate-labels.results.labels[*])
      - "short-commit=$(tasks.clone-repository.results.short-commit)"
    runAfter:
    - prefetch-dependencies
    - generate-labels
    - patch-csv
    taskRef:
      params:
      - name: name
        value: buildah-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-buildah-oci-ta:0.4@sha256:37c96c0e8639e8a70eb9bc02dfd8ce81c37a03f653f2ca306536e64a58f296b6
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
  - name: provision-eaas-space
    runAfter:
      - prefetch-dependencies
    taskRef:
      resolver: git
      params:
        - name: url
          value: https://github.com/konflux-ci/build-definitions.git
        - name: revision
          value: main
        - name: pathInRepo
          value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
    params:
      - name: ownerName
        value: $(context.pipelineRun.name)
      - name: ownerUid
        value: $(context.pipelineRun.uid)
  - name: provision-cluster
    runAfter:
      - provision-eaas-space
      - patch-csv
    taskSpec:
      results:
        - name: clusterName
          value: "$(steps.create-cluster.results.clusterName)"
      steps:
        - name: get-supported-versions
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
          params:
            - name: eaasSpaceSecretRef
              value: $(tasks.provision-eaas-space.results.secretRef)
        - name: pick-version
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
          params:
            - name: prefix
              value: "$(steps.get-supported-versions.results.versions[0])."
        - name: create-cluster
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
          params:
            - name: eaasSpaceSecretRef
              value: $(tasks.provision-eaas-space.results.secretRef)
            - name: version
              value: "$(steps.pick-version.results.version)"
            - name: instanceType
              value: m5.2xlarge
  - name: deploy-operator
    runAfter:
      - provision-cluster
      - build-images
    params:
      - name: bundleImage
        value: "$(params.output-image)"
      - name: namespace
        value: "default"
    taskSpec:
      params:
        - name: bundleImage
          type: string
        - name: namespace
          type: string
      volumes:
        - name: credentials
          emptyDir: { }
      steps:
        - name: get-kubeconfig
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
          params:
            - name: eaasSpaceSecretRef
              value: $(tasks.provision-eaas-space.results.secretRef)
            - name: clusterName
              value: "$(tasks.provision-cluster.results.clusterName)"
            - name: credentials
              value: credentials
        - name: create-e2e-namespace
          image: registry.redhat.io/openshift4/ose-cli:latest
          env:
            - name: KUBECONFIG
              value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          script: |
            #!/usr/bin/env bash
            if ! kubectl get namespace e2e-test; then
              kubectl create namespace e2e-test
            else
              echo "Namespace e2e-test already exists."
            fi
        - name: operator-sdk-run-bundle
          image: quay.io/operator-framework/operator-sdk:latest
          env:
            - name: KUBECONFIG
              value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          args:
            - run
            - bundle
            - --namespace
            - "e2e-test"
            - --timeout
            - "10m0s"
            - "$(params.bundleImage)"
  - name: e2e-test
    description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
    runAfter:
      - deploy-operator
    params:
      - name: SNAPSHOT
        value: $(params.SNAPSHOT)
    taskSpec:
      params:
        - name: SNAPSHOT
      volumes:
        - name: credentials
          emptyDir: { }
      results:
        - name: TEST_OUTPUT
          description: Test output
      steps:
        - name: get-kubeconfig
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
          params:
            - name: eaasSpaceSecretRef
              value: $(tasks.provision-eaas-space.results.secretRef)
            - name: clusterName
              value: "$(tasks.provision-cluster.results.clusterName)"
            - name: credentials
              value: credentials
        - name: e2e
          image: quay.io/openshift-pipeline/ci:latest
          env:
            - name: SNAPSHOT
              value: $(params.SNAPSHOT)
            - name: KUBECONFIG
              value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          script: |
            #!/usr/bin/env bash
            set -ex -u -o pipefail

            # TODO: remove this hack for getting cluster credentials for debugging
            cat /credentials/cluster-*-password
            
            NAMESPACE="default" # using default since openshift-builds NS is not available
            DEPLOYMENTS=("openshift-builds-operator" "openshift-pipelines-operator" "shipwright-build-controller" "shipwright-build-webhook" "tekton-operator-webhook" "shared-resource-csi-driver-webhook")
            BUILDS=("buildah-golang-buildrun")
            sleep 600
            oc get all -n $NAMESPACE
            for DEPLOYMENT in "${DEPLOYMENTS[@]}"; do
                oc wait deployment "$DEPLOYMENT" --namespace="$NAMESPACE" --for="condition=available" --timeout="180s"
            done

            echo "All specified deployments are running and ready."

            # Check running builds
            oc apply -f - <<EOF
            apiVersion: shipwright.io/v1beta1
            kind: Build
            metadata:
              name: buildah-golang-build
            spec:
              source:
                type: Git
                git:
                  url: https://github.com/redhat-openshift-builds/samples
                contextDir: buildah-build
              strategy:
                name: buildah
                kind: ClusterBuildStrategy
              paramValues:
              - name: dockerfile
                value: Dockerfile
              output:
                image: ttl.sh/build-examples-golang:30m
            EOF

            oc apply -f - <<EOF
            apiVersion: shipwright.io/v1beta1
            kind: BuildRun
            metadata:
              name: buildah-golang-buildrun
            spec:
              build:
                name: buildah-golang-build
            EOF

            # Wait for builds to succeed (with a 10-minute timeout)
            TIMEOUT=600  # 10 minutes
            INTERVAL=30   # Check every 30 seconds

            for BUILD in "${BUILDS[@]}"; do
                START_TIME=$(date +%s)

                while true; do
                    CURRENT_TIME=$(date +%s)
                    ELAPSED=$((CURRENT_TIME - START_TIME))

                    if [[ $ELAPSED -ge $TIMEOUT ]]; then
                        echo "Timeout waiting for build $BUILD. Exiting..."
                        exit 1
                    fi

                    STATUS=$(kubectl get buildrun "$BUILD" -n "$NAMESPACE" -o jsonpath="{.status.conditions[?(@.type=='Succeeded')].status}" 2>/dev/null || echo "Unknown")

                    if [[ "$STATUS" == "True" ]]; then
                        echo "Build $BUILD succeeded!"
                        break
                    elif [[ "$STATUS" == "False" ]]; then
                        echo "Build $BUILD failed!"
                        exit 1
                    else
                        echo "Waiting for build $BUILD to complete... ($ELAPSED/$TIMEOUT seconds)"
                        sleep $INTERVAL
                    fi
                done
            done

            echo "All builds completed successfully."
  workspaces:
    - name: git-auth
      optional: true
    - name: netrc
      optional: true
