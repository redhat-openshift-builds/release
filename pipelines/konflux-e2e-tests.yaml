---
  apiVersion: tekton.dev/v1
  kind: Pipeline
  metadata:
    name: e2e-openshift-builds
  spec:
    description: |
      An integration test which provisions an ephemeral Hypershift cluster and deploys an Operator
      bundle from a Konflux snapshot.
    params:
      - description: Snapshot of the application
        name: SNAPSHOT
        default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
        type: string
      - description: Builds for OpenShift Version
        name: VERSION
        default: ""
        type: string
    tasks:
      - name: provision-eaas-space
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/konflux-ci/build-definitions.git
            - name: revision
              value: main
            - name: pathInRepo
              value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
        params:
          - name: ownerName
            value: $(context.pipelineRun.name)
          - name: ownerUid
            value: $(context.pipelineRun.uid)
      - name: provision-cluster
        runAfter:
          - provision-eaas-space
        taskSpec:
          results:
            - name: clusterName
              value: "$(steps.create-cluster.results.clusterName)"
          steps:
            - name: get-supported-versions
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
            - name: pick-version
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
              params:
                - name: prefix
                  value: "$(steps.get-supported-versions.results.versions[0])."
            - name: create-cluster
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: version
                  value: "$(steps.pick-version.results.version)"
                - name: instanceType
                  value: m5.2xlarge
                - name: fips
                  value: "true"
                - name: imageContentSources
                  value: |
                      - source: registry.redhat.io/openshift-builds/openshift-builds-rhel9-operator
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-operator$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-operator-bundle
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-operator-bundle$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-controller-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-controller$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-image-processing-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-image-processing$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-image-bundler-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-image-bundler$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-git-cloner-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-git-cloner$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-waiters-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-waiter$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-webhook-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-webhook$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-shared-resource-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-shared-resource$(params.VERSION)
                      - source: registry.redhat.io/openshift-builds/openshift-builds-shared-resource-webhook-rhel9
                        mirrors:
                          - quay.io/redhat-user-workloads/rh-openshift-builds-tenant/openshift-builds-shared-resource-webhook$(params.VERSION)

      - name: verify-fips-enabled-on-nodes
        description: Verify that FIPS is enabled on cluster nodes
        runAfter:
          - provision-cluster
        taskSpec:
          volumes:
            - name: credentials
              emptyDir: { }
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: check-fips
              image: quay.io/openshift-pipeline/ci:latest
              env:
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              script: |
                #!/usr/bin/env bash
                set -ex -u -o pipefail
                
                echo "Verifying FIPS compliance on cluster nodes..."
                
                # Get all worker nodes
                WORKER_NODES=$(oc get nodes -l node-role.kubernetes.io/worker -o jsonpath='{.items[*].metadata.name}')
                
                if [ -z "$WORKER_NODES" ]; then
                    echo "No worker nodes found. Checking all nodes..."
                    WORKER_NODES=$(oc get nodes -o jsonpath='{.items[*].metadata.name}')
                fi
                
                echo "Found nodes: $WORKER_NODES"
                
                # Check FIPS on each node
                for NODE in $WORKER_NODES; do
                    echo "Checking FIPS status on node: $NODE"
                    
                    # Create a debug pod to check FIPS status
                    FIPS_STATUS=$(oc debug node/$NODE --image=quay.io/openshift-pipeline/ci:latest -- chroot /host cat /proc/sys/crypto/fips_enabled 2>/dev/null || echo "Failed to check")
                    
                    echo "FIPS status on $NODE: $FIPS_STATUS"
                    
                    if [ "$FIPS_STATUS" = "1" ]; then
                        echo "✓ Node $NODE has FIPS enabled"
                    elif [ "$FIPS_STATUS" = "0" ]; then
                        echo "✗ Node $NODE has FIPS disabled"
                        exit 1
                    else
                        echo "✗ Failed to check FIPS status on node $NODE: $FIPS_STATUS"
                        exit 1
                    fi
                done
                
                echo "✓ All nodes have FIPS enabled"
      - name: install-openshift-pipelines
        runAfter:
          - verify-fips-enabled-on-nodes
        taskSpec:
          volumes:
            - name: credentials
              emptyDir: { }
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: install-pipelines
              image: registry.redhat.io/openshift4/ose-cli:latest
              env:
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              script: |
                #!/usr/bin/env bash
                set -ex -u -o pipefail
                # TODO: remove this hack for getting cluster credentials for debugging

                cat /credentials/cluster-*-password

                oc apply -f - <<EOF
                apiVersion: operators.coreos.com/v1alpha1
                kind: Subscription
                metadata:
                  name: openshift-pipelines-operator
                  namespace: openshift-operators
                spec:
                  channel: latest
                  name: openshift-pipelines-operator-rh
                  source: redhat-operators
                  sourceNamespace: openshift-marketplace
                EOF
                
                NAMESPACE="openshift-operators"
                DEPLOYMENTS=(
                    "openshift-pipelines-operator"
                    "tekton-operator-webhook"
                )
                
                echo "=== Initial cluster state ==="
                oc get all -n $NAMESPACE
                echo "=== Node information ==="
                oc get nodes -o wide
                echo "=== Pods in $NAMESPACE namespace ==="
                oc get pods -n $NAMESPACE -o wide
                sleep 60
                # Check all deployments in the builds-e2e-test namespace
                for DEPLOYMENT in "${DEPLOYMENTS[@]}"; do
                    echo "=== Waiting for deployment: $DEPLOYMENT in namespace $NAMESPACE ==="
                    sleep 20
                    # Check if deployment exists
                    if ! oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" >/dev/null 2>&1; then
                        echo "ERROR: Deployment $DEPLOYMENT does not exist in namespace $NAMESPACE"
                        echo "Available deployments:"
                        oc get deployments -n $NAMESPACE
                        exit 1
                    fi
                    
                    # Show deployment details before waiting
                    echo "Deployment $DEPLOYMENT details:"
                    oc describe deployment "$DEPLOYMENT" --namespace="$NAMESPACE"
                    
                    # Show associated pods
                    echo "Pods for deployment $DEPLOYMENT:"
                    oc get pods -n $NAMESPACE -l app="$DEPLOYMENT" -o wide || echo "No pods found with app=$DEPLOYMENT"
                    
                    # Try to wait for the deployment
                    if ! oc wait deployment "$DEPLOYMENT" --namespace="$NAMESPACE" --for="condition=available" --timeout="180s"; then
                        echo "ERROR: Deployment $DEPLOYMENT failed to become available within 180s"
                        
                        # Get detailed deployment status
                        echo "=== Deployment $DEPLOYMENT status ==="
                        oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" -o yaml
                        
                        # Get events related to this deployment
                        echo "=== Events for deployment $DEPLOYMENT ==="
                        oc get events --namespace="$NAMESPACE" --field-selector involvedObject.name="$DEPLOYMENT" --sort-by='.lastTimestamp'
                        
                        # Get all events in the namespace
                        echo "=== All events in namespace $NAMESPACE ==="
                        oc get events --namespace="$NAMESPACE" --sort-by='.lastTimestamp' | tail -20
                                              
                        # Get resource usage
                        echo "=== Resource usage ==="
                        oc top nodes 2>/dev/null || echo "Failed to get node resource usage"
                        oc top pods -n $NAMESPACE 2>/dev/null || echo "Failed to get pod resource usage"
                        
                        exit 1
                    else
                        echo "✓ Deployment $DEPLOYMENT is available"
                    fi
                done
                
                echo "All specified deployments are running and ready."
              
      - name: deploy-operator
        runAfter:
          - install-openshift-pipelines
        taskSpec:
          volumes:
            - name: credentials
              emptyDir: { }
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: operator-bundle-install
              image: registry.redhat.io/openshift4/ose-cli:latest
              env:
                - name: SNAPSHOT
                  value: $(params.SNAPSHOT)
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              script: |
                echo "Kubeconfig file"
                cat $KUBECONFIG

                echo "Install operator-sdk and dependencies"
                dnf -y install jq
                export OPERATOR_SDK_VERSION=1.36.1
                export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
                export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v${OPERATOR_SDK_VERSION}
                curl -Lo /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_linux_${ARCH}
                chmod +x /usr/local/bin/operator-sdk
                operator-sdk version

                echo "snapshot: ${SNAPSHOT}"
                KONFLUX_COMPONENT_NAME=openshift-builds-operator-bundle$(params.VERSION)
                export BUNDLE_IMAGE="$(jq -r --arg component_name "$KONFLUX_COMPONENT_NAME" '.components[] | select(.name == $component_name) | .containerImage' <<< "$SNAPSHOT")"
                echo "bundle image: ${BUNDLE_IMAGE}"
                echo "Install builds operator"
                builds_install_ns="builds-e2e-test"
                oc create namespace ${builds_install_ns} --dry-run=client -o yaml | oc apply -f -
                /usr/local/bin/operator-sdk run bundle --timeout=5m --namespace "${builds_install_ns}" "$BUNDLE_IMAGE" --verbose
      - name: e2e-test
        description: Placeholder task that prints the Snapshot and outputs standard TEST_OUTPUT
        runAfter:
          - deploy-operator
        params:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
        taskSpec:
          params:
            - name: SNAPSHOT
          volumes:
            - name: credentials
              emptyDir: { }
          results:
            - name: TEST_OUTPUT
              description: Test output
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: e2e
              image: quay.io/openshift-pipeline/ci:latest
              env:
                - name: SNAPSHOT
                  value: $(params.SNAPSHOT)
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              script: |
                #!/usr/bin/env bash
                set -ex -u -o pipefail
                # TODO: remove this hack for getting cluster credentials for debugging
                dnf -y install awk
                cat /credentials/cluster-*-password
                
                NAMESPACE="builds-e2e-test"
                DEPLOYMENTS=(
                    "openshift-builds-operator"
                    "shipwright-build-controller"
                    "shipwright-build-webhook"
                )
                BUILDS=("buildah-golang-buildrun")
                
                echo "=== Initial cluster state ==="
                oc get all -n $NAMESPACE
                echo "=== Node information ==="
                oc get nodes -o wide
                echo "=== Pods in $NAMESPACE namespace ==="
                oc get pods -n $NAMESPACE -o wide
                sleep 60
                # Check all deployments in the builds-e2e-test namespace
                for DEPLOYMENT in "${DEPLOYMENTS[@]}"; do
                    echo "=== Waiting for deployment: $DEPLOYMENT in namespace $NAMESPACE ==="
                    sleep 20
                    # Check if deployment exists
                    if ! oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" >/dev/null 2>&1; then
                        echo "ERROR: Deployment $DEPLOYMENT does not exist in namespace $NAMESPACE"
                        echo "Available deployments:"
                        oc get deployments -n $NAMESPACE
                        exit 1
                    fi
                    
                    # Show deployment details before waiting
                    echo "Deployment $DEPLOYMENT details:"
                    oc describe deployment "$DEPLOYMENT" --namespace="$NAMESPACE"
                    
                    # Debug: Check pod template security context
                    echo "=== Debug: Pod template security context for $DEPLOYMENT ==="
                    oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" -o jsonpath='{.spec.template.spec.securityContext}' | jq . || echo "No security context found"
                    
                    # Debug: Check container security context
                    echo "=== Debug: Container security contexts for $DEPLOYMENT ==="
                    oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" -o jsonpath='{.spec.template.spec.containers[*].securityContext}' | jq . || echo "No container security context found"
                    
                    # Show associated pods
                    echo "Pods for deployment $DEPLOYMENT:"
                    oc get pods -n $NAMESPACE -l app="$DEPLOYMENT" -o wide || echo "No pods found with app=$DEPLOYMENT"
                    
                    # Try to wait for the deployment
                    if ! oc wait deployment "$DEPLOYMENT" --namespace="$NAMESPACE" --for="condition=available" --timeout="180s"; then
                        echo "ERROR: Deployment $DEPLOYMENT failed to become available within 180s"
                        
                        # Get detailed deployment status
                        echo "=== Deployment $DEPLOYMENT status ==="
                        oc get deployment "$DEPLOYMENT" --namespace="$NAMESPACE" -o yaml
                        
                        # Get events related to this deployment
                        echo "=== Events for deployment $DEPLOYMENT ==="
                        oc get events --namespace="$NAMESPACE" --field-selector involvedObject.name="$DEPLOYMENT" --sort-by='.lastTimestamp'
                        
                        # Get all events in the namespace
                        echo "=== All events in namespace $NAMESPACE ==="
                        oc get events --namespace="$NAMESPACE" --sort-by='.lastTimestamp' | tail -20
                        
                        # Get pod logs for this deployment
                        echo "=== Pod logs for deployment $DEPLOYMENT ==="
                        PODS=$(oc get pods -n $NAMESPACE -l app="$DEPLOYMENT" -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
                        if [ -n "$PODS" ]; then
                            for POD in $PODS; do
                                echo "--- Logs for pod $POD ---"
                                oc logs "$POD" --namespace="$NAMESPACE" --tail=50 || echo "Failed to get logs for $POD"
                            done
                        else
                            echo "No pods found for deployment $DEPLOYMENT"
                            # Try to find pods by deployment name
                            PODS=$(oc get pods -n $NAMESPACE | grep "$DEPLOYMENT" | awk '{print $1}')
                            for POD in $PODS; do
                                echo "--- Logs for pod $POD ---"
                                oc logs "$POD" --namespace="$NAMESPACE" --tail=50 || echo "Failed to get logs for $POD"
                            done
                        fi
                                              
                        # Get resource usage
                        echo "=== Resource usage ==="
                        oc top nodes 2>/dev/null || echo "Failed to get node resource usage"
                        oc top pods -n $NAMESPACE 2>/dev/null || echo "Failed to get pod resource usage"
                        
                        exit 1
                    else
                        echo "✓ Deployment $DEPLOYMENT is available"
                    fi
                done
                
                echo "All specified deployments are running and ready."
                # Check running builds
                oc apply -n "${NAMESPACE}" -f - <<EOF
                apiVersion: shipwright.io/v1beta1
                kind: Build
                metadata:
                  name: buildah-golang-build
                spec:
                  source:
                    type: Git
                    git:
                      url: https://github.com/redhat-openshift-builds/samples
                    contextDir: buildah
                  strategy:
                    name: buildah
                    kind: ClusterBuildStrategy
                  paramValues:
                  - name: dockerfile
                    value: Dockerfile
                  output:
                    image: ttl.sh/build-examples-golang:30m
                EOF
                oc apply -n "${NAMESPACE}" -f - <<EOF
                apiVersion: shipwright.io/v1beta1
                kind: BuildRun
                metadata:
                  name: buildah-golang-buildrun
                spec:
                  build:
                    name: buildah-golang-build
                EOF
                # Wait for builds to succeed (with a 10-minute timeout)
                TIMEOUT=600  # 10 minutes
                INTERVAL=30   # Check every 30 seconds
                for BUILD in "${BUILDS[@]}"; do
                    START_TIME=$(date +%s)
                    while true; do
                        CURRENT_TIME=$(date +%s)
                        ELAPSED=$((CURRENT_TIME - START_TIME))
                        if [[ $ELAPSED -ge $TIMEOUT ]]; then
                            echo "Timeout waiting for build $BUILD. Exiting..."
                            oc describe buildrun "$BUILD" -n "$NAMESPACE" || echo "Could not describe buildrun."
                            exit 1
                        fi
                        STATUS=$(kubectl get buildrun "$BUILD" -n "$NAMESPACE" -o jsonpath="{.status.conditions[?(@.type=='Succeeded')].status}" 2>/dev/null || echo "Unknown")
                        if [[ "$STATUS" == "True" ]]; then
                            echo "Build $BUILD succeeded!"
                            break
                        elif [[ "$STATUS" == "False" ]]; then
                            echo "Build $BUILD failed!"
                            oc describe buildrun "$BUILD" -n "$NAMESPACE" || echo "Could not describe buildrun."
                            exit 1
                        else
                            echo "Waiting for build $BUILD to complete... ($ELAPSED/$TIMEOUT seconds)"
                            # After a minute of waiting, start providing more debug info
                            if [[ $ELAPSED -gt 60 ]]; then
                                echo "BuildRun status is still Unknown. Gathering additional debug info..."
                                
                                # Describe the BuildRun itself
                                oc describe buildrun "$BUILD" -n "$NAMESPACE" || echo "Could not describe buildrun."
                                
                                # Try to find the pod associated with the BuildRun
                                BUILDRUN_POD=$(oc get pod -n "$NAMESPACE" -l "buildrun.shipwright.io/name=$BUILD" -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
                                if [ -n "$BUILDRUN_POD" ]; then
                                    echo "--- Describing BuildRun Pod: $BUILDRUN_POD ---"
                                    oc describe pod "$BUILDRUN_POD" -n "$NAMESPACE"
                                    
                                    echo "--- Logs from BuildRun Pod: $BUILDRUN_POD ---"
                                    oc logs "$BUILDRUN_POD" -n "$NAMESPACE" --all-containers || echo "Could not retrieve logs from pod $BUILDRUN_POD."
                                else
                                    echo "No pod found for BuildRun $BUILD yet. Checking controller logs..."
                                    CONTROLLER_POD=$(oc get pods -n "$NAMESPACE" -l app=shipwright-build-controller -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
                                    if [ -n "$CONTROLLER_POD" ]; then
                                        echo "--- Logs from shipwright-build-controller: $CONTROLLER_POD ---"
                                        oc logs "$CONTROLLER_POD" -n "$NAMESPACE" --tail=50 || echo "Could not retrieve logs from controller."
                                    fi
                                fi
                            fi
                            sleep $INTERVAL
                        fi
                    done
                done
                echo "All builds completed successfully."
